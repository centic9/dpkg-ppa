.\" dpkg manual page - dpkg-buildflags(1)
.\"
.\" Copyright Â© 2010-2011 RaphaÃ«l Hertzog <hertzog@debian.org>
.\" Copyright Â© 2011 Kees Cook <kees@debian.org>
.\" Copyright Â© 2011-2015 Guillem Jover <guillem@debian.org>
.\"
.\" This is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see <https://www.gnu.org/licenses/>.
.
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH dpkg\-buildflags 1 04\-09\-2014 "Projet Debian" "suite dpkg"
.SH NOM
dpkg\-buildflags \- retourne les options de compilation à utiliser pour la
construction du paquet
.
.SH SYNOPSIS
\fBdpkg\-buildflags\fP [\fIoption\fP...] [\fIcommande\fP]
.
.SH DESCRIPTION
\fBdpkg\-buildflags\fP est un script qui permet de récupérer les options de
compilation à utiliser pour la construction d'un paquet.
.
Les drapeaux par défaut sont définis par le fournisseur de la distribution
mais peuvent être étendus ou remplacés de plusieurs façons\ :
.IP 1.
pour tout le système avec \fB/etc/dpkg/buildflags.conf\fP;
.IP 2.
pour l'utilisateur courant avec \fB$XDG_CONFIG_HOME/dpkg/buildflags.conf\fP où
la valeur par défaut de \fB$XDG_CONFIG_HOME\fP est \fB$HOME/.config\fP;
.IP 3.
temporairement par l'utilisateur avec des variables d'environnement (voir
\fBVARIABLES D'ENVIRONNEMENT\fP).
.IP 4.
dynamiquement par le responsable du paquet avec des variables
d'environnement via \fBdebian/rules\fP (voir \fBVARIABLES D'ENVIRONNEMENT\fP).
.P
Les fichiers de configuration peuvent contenir deux types de directives\ :
.TP 
\fBSET\fP\fI drapeau valeur\fP
Remplace le drapeau \fIdrapeau\fP par la valeur \fIvaleur\fP.
.TP 
\fBSTRIP\fP\fI valeur drapeau\fP
Retire du drapeau \fIdrapeau\fP tous les drapeaux de construction listés dans
\fIvaleur\fP.
.TP 
\fBAPPEND\fP\fI drapeau valeur\fP
Étend le drapeau \fIdrapeau\fP avec les options indiquées dans \fIvaleur\fP. Une
espace est ajoutée au début de ce qui est ajouté si la valeur actuelle du
drapeau n'est pas vide.
.TP 
\fBPREPEND\fP\fI valeur drapeau\fP
Préfixe le drapeau \fIdrapeau\fP avec les options indiquées dans \fIvaleur\fP. Une
espace est ajoutée au début de ce qui est ajouté si la valeur actuelle du
drapeau n'est pas vide.
.P
Les fichiers de configuration peuvent contenir des commentaires sur les
lignes commençant par un dièse (#). Les lignes vides sont également
ignorées.
.SH COMMANDES
.TP 
\fB\-\-dump\fP
Print to standard output all compilation flags and their values. It prints
one flag per line separated from its value by an equal sign
(\(lq\fIflag\fP=\fIvalue\fP\(rq). This is the default action.
.TP 
\fB\-\-list\fP
Affiche la liste des drapeaux gérés par l'éditeur actuel (un par
ligne). Voir la section \fBDRAPEAUX GÉRÉS\fP pour plus d'informations sur
chacun d'eux.
.TP 
\fB\-\-status\fP
Display any information that can be useful to explain the behaviour of
\fBdpkg\-buildflags\fP (since dpkg 1.16.5): relevant environment variables,
current vendor, state of all feature flags.  Also print the resulting
compiler flags with their origin.

Cette option est destinée à être utilisée depuis \fBdebian/rules\fP, afin de
garder dans le journal de construction une trace claire des drapeaux de
compilation utilisés. Cela peut être utile pour diagnostiquer des problèmes
qui y seraient liés.
.TP 
\fB\-\-export=\fP\fIformat\fP
Affiche sur la sortie standard les commandes qui permettent d'exporter tous
les drapeaux de compilation pour un outil particulier. Si \fIformat\fP n'est
pas spécifié, sa valeur est \fBsh\fP. Seuls les drapeaux de compilation
commençant par une majuscule sont inclus, les autres étant supposés
inadaptés à l'environnement. Formats pris en charge\ :
.RS
.TP 
\fBsh\fP
Commandes shell pour définir et exporter tous les drapeaux de compilation
dans l'environnement. Les valeurs drapeau sont protégées et ainsi la sortie
est prête à être évaluée par un shell.
.TP 
\fBcmdline\fP
Arguments à passer à la ligne de commande d'un programme de construction
pour utiliser tous les drapeaux de compilation (depuis dpkg 1.17.0). Les
valeurs drapeau sont protégées dans la syntaxe du shell.
.TP 
\fBconfigure\fP
C'est un ancien alias pour \fBcmdline\fP.
.TP 
\fBmake\fP
Directives de make pour définir et exporter tous les drapeaux de compilation
dans l'environnement. La sortie peut être écrite dans un fragment de
makefile et évaluée en utilisant une directive \fBinclude\fP.
.RE
.TP 
\fB\-\-get\fP\fI drapeau\fP
Affiche la valeur de ce drapeau sur la sortie standard. Retourne un code de
sortie 0 si le drapeau est connu et 1 s'il est inconnu.
.TP 
\fB\-\-origin\fP\fI drapeau\fP
Affiche l'origine de la valeur renvoyée par \fB\-\-get\fP. Retourne un code de
sortie 0 si le drapeau est connu et 1 s'il est inconnu. L'origine est une
des valeurs suivantes\ :
.RS
.TP 
\fBvendor\fP
le drapeau défini à l'origine par l'éditeur est renvoyé\ ;
.TP 
\fBsystem\fP
le drapeau est placé ou modifié par un réglage système\ ;
.TP 
\fBuser\fP
le drapeau est placé ou modifié par une configuration spécifique à
l'utilisateur\ ;
.TP 
\fBenv\fP
le drapeau est placé ou modifié par une configuration spécifique dans
l'environnement.
.RE
.TP 
\fB\-\-query\-features\fP\fI domaine\fP
Print the features enabled for a given area (since dpkg 1.16.2).  The only
currently recognized areas on Debian and derivatives are \fBqa\fP,
\fBreproducible\fP, \fBsanitize\fP and \fBhardening\fP, see the \fBFEATURE AREAS\fP
section for more details.  Exits with 0 if the area is known otherwise exits
with 1.
.IP
L'affichage est dans le format RFC822, avec une section par
fonctionnalité. Par exemple\ :
.IP
.nf
  Feature: pie
  Enabled: no

  Feature: stackprotector
  Enabled: yes
.fi
.TP 
\fB\-\-help\fP
Affiche un message d'aide puis quitte.
.TP 
\fB\-\-version\fP
Affiche le numéro de version puis quitte.
.
.SH "DRAPEAUX GÉRÉS"
.TP 
\fBCFLAGS\fP
Options du compilateur C. La valeur par défaut définie par l'éditeur
comporte \fB\-g\fP et le niveau d'optimisation par défaut (\fB\-O2\fP en général, ou
\fB\-O0\fP si la variable d'environnement \fBDEB_BUILD_OPTIONS\fP contient
\fInoopt\fP).
.TP 
\fBCPPFLAGS\fP
Options du préprocesseur C. Valeur par défaut\ :\ aucune.
.TP 
\fBCXXFLAGS\fP
Options du compilateur C++. Analogue à \fBCFLAGS\fP.
.TP 
\fBOBJCFLAGS\fP
Options du compilateur Objective C. Analogue à \fBCFLAGS\fP.
.TP 
\fBOBJCXXFLAGS\fP
Options du compilateur Objective C++. Analogue à \fBCXXFLAGS\fP.
.TP 
\fBGCJFLAGS\fP
Options du compilateur Java GNU (gcj). Un sous\-ensemble de \fBCFLAGS\fP.
.TP 
\fBFFLAGS\fP
Options du compilateur Fortran 77. Un sous\-ensemble de \fBCFLAGS\fP.
.TP 
\fBFCFLAGS\fP
Options du compilateur Fortran 9x. Analogue à \fBFFLAGS\fP.
.TP 
\fBLDFLAGS\fP
Options passées au compilateur lors du processus de liaison des exécutables
ou des objets partagés (si le linker est appelé directement, alors \fB\-Wl\fP et
\fB,\fP doivent être retirés de ces options). Valeur par défaut\ :\ aucune.
.PP
De nouveaux drapeaux pourront être ajoutés si besoin est (par exemple pour
la prise en charge de nouveaux langages).
.
.SH "ZONES D'OPTION"
.P
Each area feature can be enabled and disabled in the \fBDEB_BUILD_OPTIONS\fP
and \fBDEB_BUILD_MAINT_OPTIONS\fP environment variable's area value with the
\(oq\fB+\fP\(cq and \(oq\fB\-\fP\(cq modifier.  For example, to enable the
\fBhardening\fP \(lqpie\(rq feature and disable the \(lqfortify\(rq feature you
can do this in \fBdebian/rules\fP:
.P
  export DEB_BUILD_MAINT_OPTIONS=hardening=+pie,\-fortify
.P
The special feature \fBall\fP (valid in any area) can be used to enable or
disable all area features at the same time.  Thus disabling everything in
the \fBhardening\fP area and enabling only \(lqformat\(rq and \(lqfortify\(rq
can be achieved with:
.P
  export DEB_BUILD_MAINT_OPTIONS=hardening=\-all,+format,+fortify
.
.SS qa
Plusieurs options de compilation (détaillées ci\-dessous) peuvent être
utilisées pour détecter des problèmes dans le code source ou dans le système
de construction.
.TP 
\fBbug\fP
Ce paramètre (désactivé par défaut) ajoute toutes les options
d'avertissement détectant de façon fiable du code source problématique. Les
avertissements sont fatals.
.TP 
\fBcanary\fP
Ce paramètre (désactivé par défaut) ajoute des options détectrices
«\ canary\ » factices aux drapeaux de construction de telle sorte que les
rapports de compilation permettront de vérifier la façon dont ces drapeaux
se propagent et de repérer toute ommission des paramètres de drapeaux
habituels. Les drapeaux actuellement pris en charge sont \fBCPPFLAGS\fP,
\fBCFLAGS\fP, \fBOBJCFLAGS\fP,
 \fBCXXFLAGS\fP ainsi que \fBOBJCXXFLAGS\fP, avec les drapeaux définis à
\fB\-D__DEB_CANARY_\fP\fIflag\fP_\fIrandom\-id\fP\fB__\fP, et \fBLDFLAGS\fP paramétré à
\fB\-Wl,\-z,deb\-canary\-\fP\fIrandom\-id\fP.
.
.SS sanitize
Several compile\-time options (detailed below) can be used to help sanitize a
resulting binary against memory corruptions, memory leaks, use after free,
threading data races and undefined behavior bugs.
.TP 
\fBaddress\fP
This setting (disabled by default) adds \fB\-fsanitize=address\fP to \fBLDFLAGS\fP
and \fB\-fsanitize=address \-fno\-omit\-frame\-pointer\fP to \fBCFLAGS\fP and
\fBCXXFLAGS\fP.
.TP 
\fBthread\fP
This setting (disabled by default) adds \fB\-fsanitize=thread\fP to \fBCFLAGS\fP,
\fBCXXFLAGS\fP and \fBLDFLAGS\fP.
.TP 
\fBleak\fP
This setting (disabled by default) adds \fB\-fsanitize=leak\fP to \fBLDFLAGS\fP. It
gets automatically disabled if either the \fBaddress\fP or the \fBthread\fP
features are enabled, as they imply it.
.TP 
\fBundefined\fP
This setting (disabled by default) adds \fB\-fsanitize=undefined\fP to
\fBCFLAGS\fP, \fBCXXFLAGS\fP and \fBLDFLAGS\fP.
.SS hardening
Plusieurs options de compilation (détaillées ci\-dessous) peuvent être
utilisées pour accroître la résistance du binaire compilé face aux attaques
par corruption de la mémoire ou fournir des messages d'avertissement
supplémentaires lors de la compilation. Sauf mention contraire (voir
ci\-dessous), ces options sont activées par défaut pour les architectures qui
les gèrent.
.TP 
\fBformat\fP
This setting (enabled by default) adds \fB\-Wformat \-Werror=format\-security\fP
to \fBCFLAGS\fP, \fBCXXFLAGS\fP, \fBOBJCFLAGS\fP and \fBOBJCXXFLAGS\fP.  This will warn
about improper format string uses, and will fail when format functions are
used in a way that represent possible security problems. At present, this
warns about calls to \fBprintf\fP and \fBscanf\fP functions where the format
string is not a string literal and there are no format arguments, as in
\fBprintf(foo);\fP instead of \fBprintf("%s", foo);\fP This may be a security hole
if the format string came from untrusted input and contains \(oq%n\(cq.
.
.TP 
\fBfortify\fP
This setting (enabled by default) adds \fB\-D_FORTIFY_SOURCE=2\fP to
\fBCPPFLAGS\fP. During code generation the compiler knows a great deal of
information about buffer sizes (where possible), and attempts to replace
insecure unlimited length buffer function calls with length\-limited
ones. This is especially useful for old, crufty code.  Additionally, format
strings in writable memory that contain \(oq%n\(cq are blocked. If an
application depends on such a format string, it will need to be worked
around.

Veuillez noter que pour que cette option fasse effet, la source devra aussi
être compilée avec \fB\-O1\fP ou plus. Si la variable d'environnement
\fBDEB_BUILD_OPTIONS\fP contient \fInoopt\fP, la prise en charge de \fBfortify\fP
sera désactivée du fait des nouveaux avertissements émis par glibc version
2.16 et ultérieure.
.TP 
\fBstackprotector\fP
Ce réglage (activé par défaut si stackprotectorstrong n'est pas employé),
ajoute \fB\-fstack\-protector \-\-param=ssp\-buffer\-size=4\fP à \fBCFLAGS\fP,
\fBCXXFLAGS\fP, \fBOBJCFLAGS\fP, \fBOBJCXXFLAGS\fP, \fBGCJFLAGS\fP, \fBFFLAGS\fP et
\fBFCFLAGS\fP. Il ajoute des contrôles liés aux réécritures de piles. Cela
conduit des tentatives d'attaques par injection de code à terminer en
échec. Dans le meilleur des cas, cette protection transforme une
vulnérabilité d'injection de code en déni de service ou en non\-problème
(selon les applications).

Cette fonctionnalité impose de lier le code à glibc (ou toute autre
bibliothèque fournissant \fB__stack_chk_fail\fP) et doit donc être désactivée
lorsque le code est construit avec \fB\-nostdlib\fP, \fB\-ffreestanding\fP ou
équivalents.
.
.TP 
\fBstackprotectorstrong\fP
Ce réglage, activé par défaut, ajoute \fB\-fstack\-protector\-strong\fP à
\fBCFLAGS\fP, \fBCXXFLAGS\fP, \fBOBJCFLAGS\fP, \fBOBJCXXFLAGS\fP, \fBGCJFLAGS\fP, \fBFFLAGS\fP
et \fBFCFLAGS\fP. Il s'agit d'une version renforcée de \fBstackprotector\fPqui
n'affecte pas les performances de manière importante.

Désactiver \fBstackprotector\fP désactive également ce paramètre.

Cette fonctionnalité a les même exigences que \fBstackprotector\fP, en plus de
nécessiter gcc 4.9 ou plus récent.
.
.TP 
\fBrelro\fP
Ce réglage, activé par défaut, ajoute \fB\-Wl,\-z,relro\fP à \fBLDFLAGS\fP. Lors du
chargement du programme, plusieurs parties de la mémoire ELF doivent être
écrites par l'éditeur de liens. Ce réglage indique au chargeur de mettre ces
sections en lecture seule avant de rendre le contrôle au
programme. L'utilisation habituelle de ce réglage est la protection contre
les attaques par réécriture GOT. Si cette option est désactivée, l'option
\fBbindnow\fP sera également désactivée.
.
.TP 
\fBbindnow\fP
Ce réglage, désactivé par défaut, ajoute \fB\-Wl,\-z,now\fP à \fBLDFLAGS\fP. Lors du
chargement du programme, tous les symboles dynamiques sont résolus, ce qui
permet au «\ PLT\ » entier (NdT\ : jargon détecté\ !) d'être en lecture seule
(du fait du réglage \fBrelro\fP ci\-dessus). Cette option ne peut être activée
si \fBrelro\fP ne l'est pas.
.
.TP 
\fBpie\fP
Ce réglage, désactivé par défaut, ajoute \fB\-fPIE\fP à \fBCFLAGS\fP, \fBCXXFLAGS\fP
\fBOBJCFLAGS\fP, \fBOBJCXXFLAGS\fP, \fBGCJFLAGS\fP, \fBFFLAGS\fP et \fBFCFLAGS\fP,ainsi que
\fB\-fPIE \-pie\fP à \fBLDFLAGS\fP. Les exécutables à position indépendante
(«\ Position Independent Executable\ ») permettent d'utiliser la randomisation
de l'organisation de l'espace d'adressage (ASLR\ :\ «\ Address Space Layout
Randomization\ »), qui est gérée par certaines versions du noyau. Bien que
ASLR puisse déjà être mise en ?uvre pour les zones de données dans la pile
et le tampon (brk et mmap), les zones de codes doivent être compilées comme
indépendantes de la position. Les bibliothèques partagées font déjà cela
(\-fPIC) ce qui permet automatiquement d'utiliser ASLR. Par contre les
régions .text binaires doivent être construites en mode PIE pour mettre en
?uvre ASLR. Une fois cela réalisé, les attaques ROP («\ Return Oriented
Programming\ ») deviennent plus difficiles car il n'existe pas d'emplacement
statique d'où rebondir sur une attaque par corruption de la mémoire.

Ce réglage n'est pas compatible avec \fB\-Fpic\fP\ :\ la prudence est donc
conseillée pour la construction d'objets partagés.

De plus, comme la protection PIE est mise en ?uvre à l'aide dun registre
global, certaines architectures (notamment i386) peuvent souffrir de pertes
de performances allant jusqu'à 15\ % sur des charges d'applications utilisant
largement les segments de texte\ ; le plus souvent, cette perte de
performances n'excèdera pas 1\ %. Pour des architectures offrant plus de
registres globaux (par exemple amd64), cette pénalisation n'existe
pratiquement pas.
.SS reproducible
Les options de compilation (détaillées ci\-dessous) peuvent aider à améliorer
la reproductibilité de la construction ou fournir des messages
d'avertissement supplémentaires lors de la compilation. Sauf mention
contraire (voir ci\-dessous), ces options sont activées par défaut pour les
architectures qui les gèrent.
.TP 
\fBtimeless\fP
This setting (enabled by default) adds \fB\-Wdate\-time\fP to \fBCPPFLAGS\fP.  This
will cause warnings when the \fB__TIME__\fP, \fB__DATE__\fP and \fB\%__TIMESTAMP__\fP
macros are used.
.
.SH ENVIRONNEMENT
Deux jeux de variables d'environnement effectuent les mêmes opérations. Le
premier (DEB_\fIdrapeau\fP_\fIopération\fP) ne devrait jamais être utilisé depuis
\fBdebian/rules\fP. Il est destiné aux utilisateurs souhaitant recompiler le
paquet source avec des drapeaux de compilation modifiés. Le second
(DEB_\fIdrapeau\fP_MAINT_\fIopération\fP) ne doit être utilisé que dans
\fBdebian/rules\fP par les responsables de paquets pour modifier les drapeaux
de compilation concernés.
.TP 
\fBDEB_\fP\fIdrapeau\fP\fB_SET\fP
.TQ
\fBDEB_\fP\fIdrapeau\fP\fB_MAINT_SET\fP
Cette variable permet de forcer la valeur renvoyée pour le \fIdrapeau\fP
indiqué.
.TP 
\fBDEB_\fP\fIdrapeau\fP\fB_STRIP\fP
.TQ
\fBDEB_\fP\fIdrapeau\fP\fB_MAINT_STRIP\fP
Cette variable peut être utilisée pour fournir une liste d'options (séparées
par des espaces) qui seront retirées du jeu de drapeaux renvoyé pour le
\fIdrapeau\fP indiqué.
.TP 
\fBDEB_\fP\fIdrapeau\fP\fB_APPEND\fP
.TQ
\fBDEB_\fP\fIdrapeau\fP\fB_MAINT_APPEND\fP
Cette variable permet d'ajouter des options à la valeur renvoyée pour le
\fIdrapeau\fP indiqué.
.TP 
\fBDEB_\fP\fIdrapeau\fP\fB_PREPEND\fP
.TQ
\fBDEB_\fP\fIdrapeau\fP\fB_MAINT_PREPEND\fP
Cette variable permet de préfixer la valeur renvoyée pour le \fIdrapeau\fP
indiqué par des options supplémentaires.
.TP 
\fBDEB_BUILD_OPTIONS\fP
.TQ
\fBDEB_BUILD_MAINT_OPTIONS\fP
Ces variables peuvent être utilisées par un utilisateur ou un responsable de
paquet pour activer ou désactiver différentes options de zone qui affectent
les drapeaux de construction. La variable \fBDEB_BUILD_MAINT_OPTIONS\fP
outrepasse tous les paramètres de la zone d'options
\fBDEB_BUILD_OPTIONS\fP. Voir la section \fBZONES D'OPTION\fP pour plus de
détails.
.
.SH FICHIERS
.SS "Fichiers de configuration."
.TP 
\fB/etc/dpkg/buildflags.conf\fP
Fichier de configuration pour l'ensemble du système.
.TP 
\fB$XDG_CONFIG_HOME/dpkg/buildflags.conf\fP or 
.TQ
\fB$HOME/.config/dpkg/buildflags.conf\fP
Fichier de configuration propre à l'utilisateur
.SS "Gestion de l'empaquetage"
.TP 
\fB/usr/share/dpkg/buildflags.mk\fP
Fragment de fichier Makefile qui chargera (et facultativement exportera)
dans les variables (depuis dpkg 1.16.1) tous les drapeaux pris en charge par
\fBdpkg\-buildflags\fP.
.
.SH ENVIRONNEMENT
.TP 
\fBDEB_VENDOR\fP
This setting defines the current vendor. If not set, it will discover the
current vendor by reading \fB\%/etc/dpkg/origins/default\fP.
.
.SH EXEMPLES
Pour passer des drapeaux de compilation à une commande de compilation dans
un Makefile\ :
.PP
.RS 4
.nf
$(MAKE) $(shell dpkg\-buildflags \-\-export=cmdline)

\&./configure $(shell dpkg\-buildflags \-\-export=cmdline)
.fi
.RE
.PP
To set build flags in a shell script or shell fragment, \fBeval\fP can be used
to interpret the output and to export the flags in the environment:
.PP
.RS 4
.nf
eval "$(dpkg\-buildflags \-\-export=sh)" && make
.fi
.RE
.PP
ou définir les paramètres de position à passer à la commande\ :
.PP
.RS 4
.nf
eval "set \-\- $(dpkg\-buildflags \-\-export=cmdline)"
for dir in a b c; do (cd $dir && ./configure "$@" && make); done
.fi
.RE
.
.SS "Utilisation dans debian/rules"
Il faut appeler \fBdpkg\-buildflags\fP ou inclure \fBbuildflags.mk\fP à partir du
fichier \fBdebian/rules\fP pour obtenir les drapeaux de compilation nécessaires
à passer au système de construction. Veuillez noter que les anciennes
versions de \fBdpkg\-buildpackage\fP (antérieures à dpkg 1.16.1) exportaient ces
drapeaux automatiquement. Néanmoins, il est déconseillé de dépendre de ce
comportement parce qu'il casse l'appel manuel de \fBdebian/rules\fP.
.PP
Pour les paquets avec des systèmes de construction du style autoconf, il est
possible de passer les options appropriées à configure ou \fBmake\fP(1)
directement, comme vu ci\-dessus.
.PP
For other build systems, or when you need more fine\-grained control about
which flags are passed where, you can use \fB\-\-get\fP. Or you can include
\fBbuildflags.mk\fP instead, which takes care of calling \fB\%dpkg\-buildflags\fP
and storing the build flags in make variables.
.PP
Si vous voulez exporter tous les drapeaux de compilation dans
l'environnement (où le système de construction peut les récupérer)\ :
.PP
.RS 4
.nf
DPKG_EXPORT_BUILDFLAGS = 1
include /usr/share/dpkg/buildflags.mk
.fi
.RE
.PP
Pour un contrôle supplémentaire sur ce qui est exporté, vous pouvez exporter
manuellement les variables (puisque aucune n'est exportée par défaut)\ :
.PP
.RS 4
.nf
include /usr/share/dpkg/buildflags.mk
export CPPFLAGS CFLAGS LDFLAGS
.fi
.RE
.PP
Et enfin, vous pouvez bien sûr passer manuellement les drapeaux aux
commandes\ :
.PP
.RS 4
.nf
include /usr/share/dpkg/buildflags.mk
build\-arch:
\&	$(CC) \-o hello hello.c $(CPPFLAGS) $(CFLAGS) $(LDFLAGS)
.fi
.RE
.SH TRADUCTION
Ariel VARDI <ariel.vardi@freesbee.fr>, 2002.
Philippe Batailler, 2006.
Nicolas François, 2006.
Veuillez signaler toute erreur à <debian\-l10n\-french@lists.debian.org>.
